import logging
import os
from datetime import datetime
import pytz
from aiogram import types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv

from database import (
    add_or_update_user,
    add_reminder,
    get_user_reminders,
    update_reminder,
    delete_reminder,
    get_moscow_time
)
from keyboards import admin_kb, cancel_kb, edit_kb, main_menu_kb
from states import ReminderStates

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logger = logging.getLogger(__name__)

ADMIN_ID = int(os.getenv('ADMIN_ID', '0'))

async def send_welcome(message: types.Message):
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–∞, –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_or_update_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )
    
    if message.from_user.id == ADMIN_ID:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!", reply_markup=admin_kb)
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, "
            "–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
        )

async def create_reminder(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=cancel_kb
    )
    await state.set_state(ReminderStates.waiting_for_text)

async def process_reminder_text(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_kb)
        return

    await state.update_data(reminder_text=message.text)
    current_time = get_moscow_time()
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, {current_time.strftime('%d.%m.%Y %H:%M')}):",
        reply_markup=cancel_kb
    )
    await state.set_state(ReminderStates.waiting_for_time)

async def process_reminder_time(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_kb)
        return

    try:
        moscow_tz = pytz.timezone('Europe/Moscow')
        reminder_time = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        reminder_time = moscow_tz.localize(reminder_time)
        
        if reminder_time < get_moscow_time():
            await message.answer(
                "–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:",
                reply_markup=cancel_kb
            )
            return

        data = await state.get_data()
        reminder_text = data['reminder_text']
        
        try:
            reminder_id = add_reminder(message.from_user.id, reminder_text, reminder_time)
            
            await message.answer(
                f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\nID: {reminder_id}\n–¢–µ–∫—Å—Ç: {reminder_text}\n–í—Ä–µ–º—è: {reminder_time.strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)",
                reply_markup=admin_kb
            )
        except Exception as e:
            logger.error(f"Error saving reminder: {e}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=admin_kb
            )
        
        await state.clear()
        
    except ValueError:
        current_time = get_moscow_time()
        await message.answer(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, {current_time.strftime('%d.%m.%Y %H:%M')}):",
            reply_markup=cancel_kb
        )

async def list_reminders(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    reminders = get_user_reminders(message.from_user.id)
    if not reminders:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=admin_kb)
        return
    
    for reminder_id, text, reminder_time, is_sent in reminders:
        status = "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if is_sent else "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
        reminder_time = datetime.fromisoformat(reminder_time)
        
        response = f"üìã –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_id}\n\n"
        response += f"–¢–µ–∫—Å—Ç: {text}\n"
        response += f"–í—Ä–µ–º—è: {reminder_time.strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)\n"
        response += f"–°—Ç–∞—Ç—É—Å: {status}\n"
        
        keyboard = []
        if not is_sent:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            keyboard.append([
                types.InlineKeyboardButton(
                    text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data=f"edit_{reminder_id}"
                )
            ])
        
        if keyboard:
            reply_markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
            await message.answer(response, reply_markup=reply_markup)
        else:
            await message.answer(response)

async def process_edit_callback(callback_query: types.CallbackQuery, state: FSMContext):
    logger.info(f"Received edit callback with data: {callback_query.data}")
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        return
    
    try:
        reminder_id = int(callback_query.data.split("_")[1])
        logger.info(f"Processing edit for reminder ID: {reminder_id}")
        await state.update_data(editing_reminder_id=reminder_id)
        
        await callback_query.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=edit_kb
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in edit callback: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

async def process_edit_text_choice(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    
    data = await state.get_data()
    if 'editing_reminder_id' not in data:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", reply_markup=admin_kb)
        return
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=main_menu_kb
    )
    await state.set_state(ReminderStates.editing_reminder_text)

async def process_edit_time_choice(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    
    data = await state.get_data()
    if 'editing_reminder_id' not in data:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", reply_markup=admin_kb)
        return
    
    current_time = get_moscow_time()
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, {current_time.strftime('%d.%m.%Y %H:%M')}):",
        reply_markup=main_menu_kb
    )
    await state.set_state(ReminderStates.editing_reminder_time)

async def process_delete_reminder(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    
    data = await state.get_data()
    if 'editing_reminder_id' not in data:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=admin_kb)
        return
    
    reminder_id = data['editing_reminder_id']
    if delete_reminder(reminder_id):
        await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=admin_kb)
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", reply_markup=admin_kb)
    
    await state.clear()

async def process_edit_text(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞ –≥–ª–∞–≤–Ω—É—é":
        await state.clear()
        await message.answer("–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é", reply_markup=admin_kb)
        return
        
    if message.from_user.id != ADMIN_ID:
        return
    
    data = await state.get_data()
    reminder_id = data['editing_reminder_id']
    
    if update_reminder(reminder_id, text=message.text):
        await message.answer("–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=admin_kb)
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", reply_markup=admin_kb)
    
    await state.clear()

async def process_edit_time(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞ –≥–ª–∞–≤–Ω—É—é":
        await state.clear()
        await message.answer("–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é", reply_markup=admin_kb)
        return
        
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        moscow_tz = pytz.timezone('Europe/Moscow')
        new_time = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        new_time = moscow_tz.localize(new_time)
        
        if new_time < get_moscow_time():
            await message.answer(
                "–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:",
                reply_markup=main_menu_kb
            )
            return
        
        data = await state.get_data()
        reminder_id = data['editing_reminder_id']
        
        if update_reminder(reminder_id, reminder_time=new_time):
            await message.answer("–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=admin_kb)
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", reply_markup=admin_kb)
        
        await state.clear()
        
    except ValueError:
        current_time = get_moscow_time()
        await message.answer(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, {current_time.strftime('%d.%m.%Y %H:%M')}):",
            reply_markup=main_menu_kb
        )

async def return_to_main(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é", reply_markup=admin_kb)

async def track_user(message: types.Message):
    try:
        logger.info(f"Tracking user: {message.from_user.id}")
        add_or_update_user(
            message.from_user.id,
            message.from_user.username,
            message.from_user.first_name,
            message.from_user.last_name
        )
        logger.info(f"Successfully tracked user: {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error tracking user {message.from_user.id}: {e}") 